using Source.Generator.TemplateManager.Models.Enums;
using Source.Generator.TemplateManager.Models.FilePathHandlers;
using Source.Generator.TemplateManager.Models.Identifiers;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace Source.Generator.TemplateManager;



public class RepositoryMethod : TemplateMethodBase
{

    public RepositoryMethod(string name, ResultTypes resultType, MethodTypes type) : base(name, resultType)
    {
        Type = type;

    }


    public MethodTypes Type { get; set; }

}

public class RepositoryPreset
{
    string uniqueTemplateId = "REPOSITORY-TEMPLATE";
    private static List<RepositoryMethod> GetPresetMethods() => new List<RepositoryMethod>() {
        new RepositoryMethod("Get",  ResultTypes.Object,MethodTypes.Queries),
        new RepositoryMethod("Create", ResultTypes.Scalar,MethodTypes.Commands),
        new RepositoryMethod("Update", ResultTypes.Scalar,MethodTypes.Commands),
        new RepositoryMethod("Delete", ResultTypes.Scalar,MethodTypes.Commands)
    };
    public RepositoryPreset(string basePath)
    {
        List<RepositoryMethod> methods = GetPresetMethods();


        var parentPaths = PathHelper.GetTypePaths(basePath, Constants.TypePathTemplate);

        Parent = new Identifier(
                                     uniqueTemplateId,
                                     new PathMain(parentPaths.Main, parentPaths.UnitTestMain),
                                     new PathMain(parentPaths.Partial, parentPaths.UnitTestPartial)
                                     );


        foreach (var method in methods)
        {

            var methodPaths = PathHelper.GetMethodPaths(basePath, method.Name, method.Type, method.ResultType);

            Methods.Add(method.Name,
                                        new Identifier(
                                         $@"{uniqueTemplateId}-{method.Name}",
                                         new PathMain(methodPaths.Main, methodPaths.UnitTestMain),
                                         new PathMain(methodPaths.Partial, methodPaths.UnitTestPartial)
                                         ));
        }

    }


    public Identifier Parent { get; set; }
    public Dictionary<string, Identifier> Methods { get; set; } = new Dictionary<string, Identifier>();

}








