using Restarted.Generators;
using Restarted.Generators.Generators.Controllers.Attributes;
using Restarted.Generators.Generators.CQRS.Attributes;
using Restarted.System.Application.Common.DTO.Admin;
using Restarted.System.Application.Common.DTO.Common;
using Restarted.System.Application.Common.DTO.Pagination;

namespace Restarted.System.Application.Common.Interfaces.Persistence
{
    [GenerateService(templates: "CQRS.tt", DTOFieldNames: "tempId,Temp1")]
    [GeneratorCQRS(featureName:"Admin",featureModuleName:"Users",requestType:"Query")]
    [GeneratorApi(implementation : ImplementationType.CQRSWithRepository , controllerName: "UsersController", FeatureName = "Admin")]
    public interface IUserRepository : IBaseRepository
    {
        [GeneratorCQRS(requestType:"Query",convention:"{MethodName}User")]
        [GenerateApiCQRS(action:"GET",route:"lookup")]
        IEnumerable<NameListDTO?> Lookup();

        [GeneratorCQRS(requestType: "Command", featureName : "Authentication")]
        [GenerateApiCQRS(action: "POST", route: "Register",controllerName:"AuthenticationController")]
        Task<UserAuthDTO> Register(UserAuthDTO? entityDto);

        [GeneratorCQRS(requestType: "Query", featureName: "Authentication")]
        [GenerateApiCQRS(action: "GET", route: "UserName/{username}", methodName:"Login", controllerName: "AuthenticationController")]
        Task<UserAuthDTO> GetUserByUserName(string userName);

        [GeneratorCQRS(requestType: "Query",convention: "{MethodName}User")]

        [GenerateApiCQRS(action: "GET", route: "{id}")]
        Task<UserDTO> Get(int id);

        [GeneratorCQRS(requestType: "Query", convention: "{MethodName}Users")]
        [GenerateApiCQRS(action: "GET", route: "")]
        Task<IEnumerable<UserDTO>> GetAll();

        [GeneratorCQRS(requestType: "Query", convention: "{MethodName}UsersPaged")]

        [GenerateApiCQRS(action: "GET", route: "paged/{pageSize}/{rowIndex}")]
        Task<PagedResponse<IEnumerable<UserListDTO>>> GetAll(int rowIndex, int pageSize);

       
        [GeneratorCQRS(requestType: "Query", convention: "DuplicateUserName")]

        [GenerateApiCQRS(action: "GET", route: "exists/{userName}")]
        Task<bool> IsExists(string userName);

        
        [GeneratorCQRS(requestType: "Command", convention: "CreateUser")]
        [GenerateApiCQRS(action: "POST", route: "")]
        Task<int> Add(UserDTO entityDto);

        
        [GeneratorCQRS(requestType: "Command", convention: "UpdateUser")]

        [GenerateApiCQRS(action: "PUT", route: "")]
        Task<int> Update(UserDTO entityDto);

        [GeneratorCQRS(requestType: "Command", convention: "DeleteUser")]

        [GenerateApiCQRS(action: "DELETE", route: "")]
        Task<int> Delete(int id);


    }
}
